generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model menu_item {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String       @db.VarChar(255)
  description   String?
  price         Int
  image_url     String?      @db.VarChar(255)
  restaurant_id String       @db.Uuid
  restaurant    restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item    order_item[]
}

model notification {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String     @db.Uuid
  restaurant_id String     @db.Uuid
  event_type    String     @db.VarChar(255)
  message       String
  created_at    DateTime   @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model order {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id   String       @db.Uuid
  restaurant_id String       @db.Uuid
  status        String       @db.VarChar(255)
  total_price   Int
  created_at    DateTime     @db.Timestamp(6)
  user          user         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant    restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item    order_item[]
}

model order_item {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_id        String    @db.Uuid
  menu_item_id    String    @db.Uuid
  quantity        Int
  special_request String?
  menu_item       menu_item @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order           order     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id   String     @db.Uuid
  restaurant_id String     @db.Uuid
  date          DateTime   @db.Date
  time          DateTime   @db.Time(6)
  party_size    Int
  table_number  Int
  user          user       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String         @db.VarChar(255)
  owner_id     String         @db.Uuid
  menu_item    menu_item[]
  notification notification[]
  order        order[]
  reservation  reservation[]
  user         user           @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff        staff[]
}

model staff {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String     @db.Uuid
  restaurant_id String     @db.Uuid
  role          String     @db.VarChar(255)
  permissions   String     @db.VarChar(255)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  roq_user_id  String?        @db.VarChar(255)
  tenant_id    String?        @db.VarChar(255)
  notification notification[]
  order        order[]
  reservation  reservation[]
  restaurant   restaurant[]
  staff        staff[]
}
